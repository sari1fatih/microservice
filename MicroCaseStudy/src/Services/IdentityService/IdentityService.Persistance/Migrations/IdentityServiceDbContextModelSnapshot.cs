// <auto-generated />
using System;
using IdentityService.Persistance.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IdentityService.Persistance.Migrations
{
    [DbContext(typeof(IdentityServiceDbContext))]
    partial class IdentityServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("RefreshTokenSeq");

            modelBuilder.HasSequence("RoleSeq")
                .StartsAt(3L);

            modelBuilder.HasSequence("UserRoleSeq")
                .StartsAt(9L);

            modelBuilder.HasSequence("UserSeq")
                .StartsAt(6L);

            modelBuilder.Entity("IdentityService.Domain.Entities.Log", b =>
                {
                    b.Property<string>("Body")
                        .HasColumnType("jsonb")
                        .HasColumnName("body");

                    b.Property<string>("Exception")
                        .HasColumnType("text")
                        .HasColumnName("exception");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("http_method");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("level");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("text")
                        .HasColumnName("message_template");

                    b.Property<string>("Path")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("path");

                    b.Property<string>("Properties")
                        .HasColumnType("jsonb")
                        .HasColumnName("properties");

                    b.Property<string>("QueryParams")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("query_params");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_stamp");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.ToTable("logs", (string)null);
                });

            modelBuilder.Entity("IdentityService.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"RefreshTokenSeq\"'::regclass)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by_ip");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("ExpiresDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Jti")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("jti");

                    b.Property<string>("ReasonRevoked")
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("reason_revoked");

                    b.Property<Guid>("RecordGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("record_guid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ReplacedByJti")
                        .HasColumnType("text")
                        .HasColumnName("replaced_by_jti");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("revoked_by_ip");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("refresh_tokens_pk");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("IdentityService.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"RoleSeq\"'::regclass)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("RecordGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("record_guid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("RoleValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_value");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("roles_pk");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3870),
                            CreatedBy = 1,
                            IsActive = true,
                            IsDeleted = false,
                            RecordGuid = new Guid("cbd3a9d4-7f6e-4ef0-b827-7bd4c3a6141d"),
                            RoleValue = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3870),
                            CreatedBy = 1,
                            IsActive = true,
                            IsDeleted = false,
                            RecordGuid = new Guid("09f32505-d253-481a-abbe-017f5b12b671"),
                            RoleValue = "User"
                        });
                });

            modelBuilder.Entity("IdentityService.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"UserSeq\"'::regclass)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<Guid>("RecordGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("record_guid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Surname")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("surname");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("user_pk");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3760),
                            Email = "fatihsari1992@gmail.com",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Fatih",
                            PasswordHash = new byte[] { 160, 9, 197, 45, 23, 86, 86, 89, 15, 161, 224, 78, 212, 241, 197, 250, 220, 194, 250, 42, 68, 235, 220, 19, 20, 252, 134, 149, 75, 29, 89, 122, 97, 251, 142, 81, 163, 2, 179, 190, 9, 99, 176, 127, 52, 143, 147, 247, 94, 212, 140, 248, 225, 54, 118, 79, 56, 211, 124, 174, 136, 171, 168, 74 },
                            PasswordSalt = new byte[] { 203, 77, 216, 58, 135, 11, 120, 152, 31, 125, 113, 45, 238, 245, 33, 28, 19, 12, 108, 10, 37, 144, 30, 208, 218, 167, 12, 206, 150, 110, 164, 210, 93, 186, 174, 218, 120, 34, 14, 22, 5, 122, 234, 241, 47, 39, 30, 109, 230, 10, 225, 49, 64, 200, 217, 100, 56, 205, 77, 21, 99, 163, 165, 159, 248, 93, 61, 144, 189, 76, 90, 162, 165, 123, 12, 219, 134, 80, 174, 184, 98, 249, 98, 182, 113, 235, 103, 94, 231, 235, 177, 27, 95, 244, 159, 127, 22, 43, 104, 172, 127, 187, 159, 96, 94, 4, 246, 136, 219, 32, 41, 250, 207, 28, 117, 175, 174, 185, 103, 177, 39, 103, 63, 151, 195, 126, 191, 61 },
                            RecordGuid = new Guid("061fe893-77ef-41cd-a41d-1e74efd63f01"),
                            Surname = "Sarı",
                            Username = "sari1fatih"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3760),
                            Email = "tahirgorkan@gmail.com",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tahir",
                            PasswordHash = new byte[] { 160, 9, 197, 45, 23, 86, 86, 89, 15, 161, 224, 78, 212, 241, 197, 250, 220, 194, 250, 42, 68, 235, 220, 19, 20, 252, 134, 149, 75, 29, 89, 122, 97, 251, 142, 81, 163, 2, 179, 190, 9, 99, 176, 127, 52, 143, 147, 247, 94, 212, 140, 248, 225, 54, 118, 79, 56, 211, 124, 174, 136, 171, 168, 74 },
                            PasswordSalt = new byte[] { 203, 77, 216, 58, 135, 11, 120, 152, 31, 125, 113, 45, 238, 245, 33, 28, 19, 12, 108, 10, 37, 144, 30, 208, 218, 167, 12, 206, 150, 110, 164, 210, 93, 186, 174, 218, 120, 34, 14, 22, 5, 122, 234, 241, 47, 39, 30, 109, 230, 10, 225, 49, 64, 200, 217, 100, 56, 205, 77, 21, 99, 163, 165, 159, 248, 93, 61, 144, 189, 76, 90, 162, 165, 123, 12, 219, 134, 80, 174, 184, 98, 249, 98, 182, 113, 235, 103, 94, 231, 235, 177, 27, 95, 244, 159, 127, 22, 43, 104, 172, 127, 187, 159, 96, 94, 4, 246, 136, 219, 32, 41, 250, 207, 28, 117, 175, 174, 185, 103, 177, 39, 103, 63, 151, 195, 126, 191, 61 },
                            RecordGuid = new Guid("2fb4b76c-e2c7-4428-8a85-eb04471485c6"),
                            Surname = "Görkan",
                            Username = "gorkan1tahir"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3770),
                            Email = "utkan@gmail.com",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Utkan",
                            PasswordHash = new byte[] { 160, 9, 197, 45, 23, 86, 86, 89, 15, 161, 224, 78, 212, 241, 197, 250, 220, 194, 250, 42, 68, 235, 220, 19, 20, 252, 134, 149, 75, 29, 89, 122, 97, 251, 142, 81, 163, 2, 179, 190, 9, 99, 176, 127, 52, 143, 147, 247, 94, 212, 140, 248, 225, 54, 118, 79, 56, 211, 124, 174, 136, 171, 168, 74 },
                            PasswordSalt = new byte[] { 203, 77, 216, 58, 135, 11, 120, 152, 31, 125, 113, 45, 238, 245, 33, 28, 19, 12, 108, 10, 37, 144, 30, 208, 218, 167, 12, 206, 150, 110, 164, 210, 93, 186, 174, 218, 120, 34, 14, 22, 5, 122, 234, 241, 47, 39, 30, 109, 230, 10, 225, 49, 64, 200, 217, 100, 56, 205, 77, 21, 99, 163, 165, 159, 248, 93, 61, 144, 189, 76, 90, 162, 165, 123, 12, 219, 134, 80, 174, 184, 98, 249, 98, 182, 113, 235, 103, 94, 231, 235, 177, 27, 95, 244, 159, 127, 22, 43, 104, 172, 127, 187, 159, 96, 94, 4, 246, 136, 219, 32, 41, 250, 207, 28, 117, 175, 174, 185, 103, 177, 39, 103, 63, 151, 195, 126, 191, 61 },
                            RecordGuid = new Guid("2e9365e0-842b-4eda-a60e-bc5c4b1af1a7"),
                            Surname = "Adıgüzel",
                            Username = "adıguzel1utkan"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3770),
                            Email = "kutay@gmail.com",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kutay",
                            PasswordHash = new byte[] { 160, 9, 197, 45, 23, 86, 86, 89, 15, 161, 224, 78, 212, 241, 197, 250, 220, 194, 250, 42, 68, 235, 220, 19, 20, 252, 134, 149, 75, 29, 89, 122, 97, 251, 142, 81, 163, 2, 179, 190, 9, 99, 176, 127, 52, 143, 147, 247, 94, 212, 140, 248, 225, 54, 118, 79, 56, 211, 124, 174, 136, 171, 168, 74 },
                            PasswordSalt = new byte[] { 203, 77, 216, 58, 135, 11, 120, 152, 31, 125, 113, 45, 238, 245, 33, 28, 19, 12, 108, 10, 37, 144, 30, 208, 218, 167, 12, 206, 150, 110, 164, 210, 93, 186, 174, 218, 120, 34, 14, 22, 5, 122, 234, 241, 47, 39, 30, 109, 230, 10, 225, 49, 64, 200, 217, 100, 56, 205, 77, 21, 99, 163, 165, 159, 248, 93, 61, 144, 189, 76, 90, 162, 165, 123, 12, 219, 134, 80, 174, 184, 98, 249, 98, 182, 113, 235, 103, 94, 231, 235, 177, 27, 95, 244, 159, 127, 22, 43, 104, 172, 127, 187, 159, 96, 94, 4, 246, 136, 219, 32, 41, 250, 207, 28, 117, 175, 174, 185, 103, 177, 39, 103, 63, 151, 195, 126, 191, 61 },
                            RecordGuid = new Guid("38037f26-5c42-44b3-a867-d1b2dd956f3b"),
                            Surname = "Acar",
                            Username = "acar1kutay"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3780),
                            Email = "enes@gmail.com",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Enes",
                            PasswordHash = new byte[] { 160, 9, 197, 45, 23, 86, 86, 89, 15, 161, 224, 78, 212, 241, 197, 250, 220, 194, 250, 42, 68, 235, 220, 19, 20, 252, 134, 149, 75, 29, 89, 122, 97, 251, 142, 81, 163, 2, 179, 190, 9, 99, 176, 127, 52, 143, 147, 247, 94, 212, 140, 248, 225, 54, 118, 79, 56, 211, 124, 174, 136, 171, 168, 74 },
                            PasswordSalt = new byte[] { 203, 77, 216, 58, 135, 11, 120, 152, 31, 125, 113, 45, 238, 245, 33, 28, 19, 12, 108, 10, 37, 144, 30, 208, 218, 167, 12, 206, 150, 110, 164, 210, 93, 186, 174, 218, 120, 34, 14, 22, 5, 122, 234, 241, 47, 39, 30, 109, 230, 10, 225, 49, 64, 200, 217, 100, 56, 205, 77, 21, 99, 163, 165, 159, 248, 93, 61, 144, 189, 76, 90, 162, 165, 123, 12, 219, 134, 80, 174, 184, 98, 249, 98, 182, 113, 235, 103, 94, 231, 235, 177, 27, 95, 244, 159, 127, 22, 43, 104, 172, 127, 187, 159, 96, 94, 4, 246, 136, 219, 32, 41, 250, 207, 28, 117, 175, 174, 185, 103, 177, 39, 103, 63, 151, 195, 126, 191, 61 },
                            RecordGuid = new Guid("3735c4e4-0a92-482b-a71f-f419df0111f4"),
                            Surname = "Behlül",
                            Username = "behlul1enes"
                        });
                });

            modelBuilder.Entity("IdentityService.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"UserRoleSeq\"'::regclass)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("RecordGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("record_guid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_roles_pk");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3890),
                            CreatedBy = 1,
                            IsActive = true,
                            IsDeleted = false,
                            RecordGuid = new Guid("a8ae56b4-2164-4cdc-b963-39c8229c999d"),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3900),
                            CreatedBy = 1,
                            IsActive = true,
                            IsDeleted = false,
                            RecordGuid = new Guid("fedc061d-b85f-43c5-947f-a635c91c3533"),
                            RoleId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3900),
                            CreatedBy = 1,
                            IsActive = true,
                            IsDeleted = false,
                            RecordGuid = new Guid("86fbcc4f-0c09-463a-9396-4260f8376754"),
                            RoleId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3900),
                            CreatedBy = 1,
                            IsActive = true,
                            IsDeleted = false,
                            RecordGuid = new Guid("c1a59233-f12b-40c0-8757-a6612a68a14d"),
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3910),
                            CreatedBy = 1,
                            IsActive = true,
                            IsDeleted = false,
                            RecordGuid = new Guid("d4bc6296-2f7e-4014-8a01-bca17b5d377c"),
                            RoleId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3910),
                            CreatedBy = 1,
                            IsActive = true,
                            IsDeleted = false,
                            RecordGuid = new Guid("9700b8ec-16a8-4f6f-9b58-ab47184cd4b7"),
                            RoleId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3920),
                            CreatedBy = 1,
                            IsActive = true,
                            IsDeleted = false,
                            RecordGuid = new Guid("6cd8567a-6359-4a9d-aebb-99a621c2bf52"),
                            RoleId = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 52, 47, 691, DateTimeKind.Utc).AddTicks(3920),
                            CreatedBy = 1,
                            IsActive = true,
                            IsDeleted = false,
                            RecordGuid = new Guid("98651926-4656-4daf-99b3-89b2de62ecb0"),
                            RoleId = 2,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("IdentityService.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("IdentityService.Domain.Entities.User", "CreatedByNavigation")
                        .WithMany("RefreshTokenCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("refreshtokens_users_created_by_fk");

                    b.HasOne("IdentityService.Domain.Entities.User", "DeletedByNavigation")
                        .WithMany("RefreshTokenDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("refreshtokens_users_deleted_by_fk");

                    b.HasOne("IdentityService.Domain.Entities.User", "UpdatedByNavigation")
                        .WithMany("RefreshTokenUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("refreshtokens_users_updated_by_fk");

                    b.HasOne("IdentityService.Domain.Entities.User", "User")
                        .WithMany("RefreshTokenUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("refreshtokens_users_user_id_fk");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityService.Domain.Entities.Role", b =>
                {
                    b.HasOne("IdentityService.Domain.Entities.User", "CreatedByNavigation")
                        .WithMany("RoleCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("roles_users_created_by_fk");

                    b.HasOne("IdentityService.Domain.Entities.User", "DeletedByNavigation")
                        .WithMany("RoleDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("roles_users_deleted_by_fk");

                    b.HasOne("IdentityService.Domain.Entities.User", "UpdatedByNavigation")
                        .WithMany("RoleUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("roles_users_updated_by_fk");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("IdentityService.Domain.Entities.User", b =>
                {
                    b.HasOne("IdentityService.Domain.Entities.User", "DeletedByNavigation")
                        .WithMany("InverseDeletedByNavigation")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("users_users_deleted_by_fk");

                    b.HasOne("IdentityService.Domain.Entities.User", "UpdatedByNavigation")
                        .WithMany("InverseUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("users_users_updated_by_fk");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("IdentityService.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("IdentityService.Domain.Entities.User", "CreatedByNavigation")
                        .WithMany("UserRoleCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("userroles_users_created_by_fk");

                    b.HasOne("IdentityService.Domain.Entities.User", "DeletedByNavigation")
                        .WithMany("UserRoleDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("userroles_users_deleted_by_fk");

                    b.HasOne("IdentityService.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("userroles_roles_role_id_fk");

                    b.HasOne("IdentityService.Domain.Entities.User", "UpdatedByNavigation")
                        .WithMany("UserRoleUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("userroles_users_updated_by_fk");

                    b.HasOne("IdentityService.Domain.Entities.User", "User")
                        .WithMany("UserRoleUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("userroles_users_user_id_fk");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityService.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("IdentityService.Domain.Entities.User", b =>
                {
                    b.Navigation("InverseDeletedByNavigation");

                    b.Navigation("InverseUpdatedByNavigation");

                    b.Navigation("RefreshTokenCreatedByNavigations");

                    b.Navigation("RefreshTokenDeletedByNavigations");

                    b.Navigation("RefreshTokenUpdatedByNavigations");

                    b.Navigation("RefreshTokenUsers");

                    b.Navigation("RoleCreatedByNavigations");

                    b.Navigation("RoleDeletedByNavigations");

                    b.Navigation("RoleUpdatedByNavigations");

                    b.Navigation("UserRoleCreatedByNavigations");

                    b.Navigation("UserRoleDeletedByNavigations");

                    b.Navigation("UserRoleUpdatedByNavigations");

                    b.Navigation("UserRoleUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
