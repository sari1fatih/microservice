// <auto-generated />
using System;
using CustomerService.Persistance.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CustomerService.Persistance.Migrations
{
    [DbContext(typeof(CustomerServiceDbContext))]
    [Migration("20250211205409_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("CustomerNoteSeq")
                .StartsAt(3L);

            modelBuilder.HasSequence("CustomerSeq")
                .StartsAt(3L);

            modelBuilder.Entity("CustomerService.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"CustomerSeq\"'::regclass)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone");

                    b.Property<Guid>("RecordGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("record_guid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Surname")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("surname");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("customer_pk");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company = "Nasa",
                            CreatedAt = new DateTime(2025, 2, 11, 20, 54, 9, 459, DateTimeKind.Utc).AddTicks(6590),
                            CreatedBy = 1,
                            Email = "ayse@gmail.com",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Ayşe",
                            Phone = "12345134",
                            RecordGuid = new Guid("09fdb930-76c9-423a-881b-e8d213cf60b7"),
                            Surname = "Fatma"
                        },
                        new
                        {
                            Id = 2,
                            Company = "Tesla",
                            CreatedAt = new DateTime(2025, 2, 11, 20, 54, 9, 459, DateTimeKind.Utc).AddTicks(6600),
                            CreatedBy = 1,
                            Email = "hakkı@gmail.com",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Hakkı",
                            Phone = "12123345134",
                            RecordGuid = new Guid("bf4027c1-b4bb-4a7d-9b2f-30203a57963c"),
                            Surname = "Hakyemez"
                        });
                });

            modelBuilder.Entity("CustomerService.Domain.Entities.CustomerNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"CustomerNoteSeq\"'::regclass)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("Customerid")
                        .HasColumnType("integer")
                        .HasColumnName("customerid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid>("RecordGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("record_guid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("customernote_pk");

                    b.HasIndex("Customerid");

                    b.ToTable("CustomerNotes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 54, 9, 459, DateTimeKind.Utc).AddTicks(6680),
                            CreatedBy = 1,
                            Customerid = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Note = "Önemli Müşteri",
                            RecordGuid = new Guid("5d10d6b3-cf4f-43e5-9ebc-d40fb5db6255")
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 2, 11, 20, 54, 9, 459, DateTimeKind.Utc).AddTicks(6690),
                            CreatedBy = 1,
                            Customerid = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Note = "Çok daha önemli Müşteri",
                            RecordGuid = new Guid("58af7073-8edc-47b1-96b2-8f2ea1f5b0c0")
                        });
                });

            modelBuilder.Entity("CustomerService.Domain.Entities.CustomerNote", b =>
                {
                    b.HasOne("CustomerService.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerNotes")
                        .HasForeignKey("Customerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerService.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
