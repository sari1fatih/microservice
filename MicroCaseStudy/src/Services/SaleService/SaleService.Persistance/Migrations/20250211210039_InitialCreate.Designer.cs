// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SaleService.Persistance.Context;

#nullable disable

namespace SaleService.Persistance.Migrations
{
    [DbContext(typeof(SaleServiceDbContext))]
    [Migration("20250211210039_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("ParameterGroupSeq")
                .StartsAt(4L);

            modelBuilder.HasSequence("ParameterSeq")
                .StartsAt(5L);

            modelBuilder.HasSequence("SaleDetailSeq");

            modelBuilder.HasSequence("SaleSeq");

            modelBuilder.Entity("SaleService.Domain.Entities.Log", b =>
                {
                    b.Property<string>("Body")
                        .HasColumnType("jsonb")
                        .HasColumnName("body");

                    b.Property<string>("Exception")
                        .HasColumnType("text")
                        .HasColumnName("exception");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("http_method");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("level");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("text")
                        .HasColumnName("message_template");

                    b.Property<string>("Path")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("path");

                    b.Property<string>("Properties")
                        .HasColumnType("jsonb")
                        .HasColumnName("properties");

                    b.Property<string>("QueryParams")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("query_params");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_stamp");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.ToTable("logs", (string)null);
                });

            modelBuilder.Entity("SaleService.Domain.Entities.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"ParameterSeq\"'::regclass)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int?>("ParameterGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("parameter_group_id");

                    b.Property<string>("ParameterValue")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("parameter_value");

                    b.Property<string>("ParameterValueDescription")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("parameter_value_description");

                    b.Property<Guid>("RecordGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("record_guid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("parameters_pk");

                    b.HasIndex("ParameterGroupId");

                    b.ToTable("Parameters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ParameterGroupId = 1,
                            ParameterValue = "Yeni",
                            RecordGuid = new Guid("3843f7f6-a338-4f6b-84be-e8df3fe893c2")
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            IsDeleted = false,
                            ParameterGroupId = 1,
                            ParameterValue = "İletişimde",
                            RecordGuid = new Guid("25e9dfaa-dd46-411d-ad68-9d2faaaa6dcd")
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            IsDeleted = false,
                            ParameterGroupId = 1,
                            ParameterValue = "Anlaşma",
                            RecordGuid = new Guid("d4db096f-1ee5-4a17-9c44-9e7e515857a2")
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            IsDeleted = false,
                            ParameterGroupId = 1,
                            ParameterValue = "Kapandı",
                            RecordGuid = new Guid("b4684e3e-7a0b-4aa6-a5ce-2c7225a1f840")
                        });
                });

            modelBuilder.Entity("SaleService.Domain.Entities.ParameterGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"ParameterGroupSeq\"'::regclass)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("ParameterGroupValue")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("parameter_group_value");

                    b.Property<Guid>("RecordGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("record_guid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("parametergroups_pk");

                    b.ToTable("ParameterGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ParameterGroupValue = "Satış Durumu",
                            RecordGuid = new Guid("beeaed67-60a7-41ba-878e-027736ad41c1")
                        });
                });

            modelBuilder.Entity("SaleService.Domain.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"SaleSeq\"'::regclass)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("customer_email");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("customer_phone");

                    b.Property<string>("CustomerSurname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("customer_surname");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("RecordGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("record_guid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("SaleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sale_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("sale_pk");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("SaleService.Domain.Entities.SaleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"SaleDetailSeq\"'::regclass)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("note");

                    b.Property<Guid>("RecordGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("record_guid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("SaleId")
                        .HasColumnType("integer")
                        .HasColumnName("sale_id");

                    b.Property<int>("SaleStatusParameterId")
                        .HasColumnType("integer")
                        .HasColumnName("sale_status_parameter_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("saledetail_pk");

                    b.HasIndex("SaleId");

                    b.HasIndex("SaleStatusParameterId");

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("SaleService.Domain.Entities.Parameter", b =>
                {
                    b.HasOne("SaleService.Domain.Entities.ParameterGroup", "ParameterGroup")
                        .WithMany("Parameters")
                        .HasForeignKey("ParameterGroupId")
                        .HasConstraintName("parameters_parametergroups_parameter_group_fk");

                    b.Navigation("ParameterGroup");
                });

            modelBuilder.Entity("SaleService.Domain.Entities.SaleDetail", b =>
                {
                    b.HasOne("SaleService.Domain.Entities.Sale", "Sale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleId")
                        .IsRequired()
                        .HasConstraintName("saledetails_sales_sale_id_fk");

                    b.HasOne("SaleService.Domain.Entities.Parameter", "SaleStatusParameter")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleStatusParameterId")
                        .IsRequired()
                        .HasConstraintName("saledetails_parameters_sale_parameter_id_fk");

                    b.Navigation("Sale");

                    b.Navigation("SaleStatusParameter");
                });

            modelBuilder.Entity("SaleService.Domain.Entities.Parameter", b =>
                {
                    b.Navigation("SaleDetails");
                });

            modelBuilder.Entity("SaleService.Domain.Entities.ParameterGroup", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("SaleService.Domain.Entities.Sale", b =>
                {
                    b.Navigation("SaleDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
